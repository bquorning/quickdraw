#!/usr/bin/env ruby
# frozen_string_literal: true

module Quickdraw
	start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)

	require "optparse"
	require_relative "../lib/quickdraw"

	#  Load the local configuration
	configuration_path = File.expand_path("config/quickdraw.rb")
	require configuration_path if File.exist?(configuration_path)

	processes, threads, seed = nil

	OptionParser.new do |parser|
		parser.banner = "Usage: bundle exec qt [options]"

		parser.on("-h", "--help", "Prints this help") do
			puts parser
			exit
		end

		parser.on("-p N", "--processes N", Integer, "Number of Ruby Processes to fork (default: ~#{Quickdraw::Configuration::DEFAULT_CPU_CORE_RATIO}× CPU cores)") do |it|
			processes = it
		end

		parser.on("-t N", "--threads N", Integer, "Number of Threads per Process (default: #{Quickdraw::Configuration::DEFAULT_THREAD_COUNT})") do |it|
			threads = it
		end

		parser.on("-s N", "--seed N", Integer, "Seed for randomization") do |it|
			seed = it
		end
	end.parse!

	files = ARGV[0]

	Quickdraw::Run.new(
		processes: processes || Quickdraw::Config.processes,
		threads: threads || Quickdraw::Config.threads,
		files: Dir.glob(files || Quickdraw::Config.glob),
		seed: seed || Random.new_seed
	).call

	finish = Process.clock_gettime(Process::CLOCK_MONOTONIC, :nanosecond)

	puts "Total time: #{Quickdraw::Timer::Duration.new(finish - start)}"
end
